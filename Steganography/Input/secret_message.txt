This chapter applies LSB Steganography technique for various
lossless file formats such as BMP, GIF and PNG.
The science which deals with the hidden communication is
called Steganography. There are different kinds of steganographic
techniques which are complex and which have strong and weak points
in hiding the invisible information in various file formats. The
innocent carriers are the possible cover carriers which will hold the
hidden communication. A Steganography method is admirably secure
only when the statistics of the cover information and the stego
information are similar with each other. In other words it conveys the
meaning that the relative entropy between the cover information and
the stego information is zero. The LSB embedding technique suggests
that data can be hidden in such a way that even the naked eye is
unable to identify the hidden information in the LSBs of the cover file.
In this chapter, a Steganography system is designed for hiding
and unhiding a secret file into an image file using LSB insertion
technique. An encryption and decryption technique on the data to be
hidden into the image file is performed to provide additional security
to the data.
47
Steganography is an alternative method for privacy and
security. Instead of encrypting, we can hide the messages in other
innocuous looking medium (carrier) so that their existence is not
revealed. Among the several advantages for employing the
Steganography, secretly transmitting the secret information from
source to destination is one. In this chapter, different approaches
towards implementation of image Steganography have been
thoroughly and clearly discussed. Among several techniques, Masking
and Filtering, Algorithms and Transformations and LSB insertion [8]
are some of the methods to achieve Steganography. Among these
techniques, LSB insertion is a very simple and commonly applied
technique for embedding data in a cover file.
3.1 IMAGE STEGANOGRAPHY
Image compression is a technique which is widely used in
Steganography. It is of two types- lossy compression and lossless
compression. Lossy compression may not preserve the integrity of
original image where as Lossless compression preserves the original
image data correctly. Hence lossless compression is chosen. Examples
of Lossless compression formats are GIF [84], BMP and PNG formats.
JPEG format is the example for Lossy compression format.
3.2 CHARCTERIZING DATA HIDING TECHNIQUES
Steganography is a kind of technique which can embed a
message inside a cover object. There are a number of features that
characterizes the merits and demerits of the embedding techniques. 
48
The way they are applied decides the importance of each and every
feature. A set of criteria are proposed to define the invisibility of an
algorithm. The criterias are as follows:
 Invisibility
The imperceptibility of a Steganography technique is the most
important necessity, since the quality of Steganography lies in
its capacity to be unseen by the naked eyes.
 Payload Capacity
Steganography techniques used aim at hiding the embedded
secret data and also maximize the amount of information
embedded. The amount of information that is hidden is called
payload capacity.
 Hiding Capacity
Concealing capacity is nothing but the size of data that could be
concealed with respect to the size of the cover object. A vast
concealing capacity permits the use of smaller cover images and
thus decreases the data transmission needed to broadcast the
stego image.
 Perceptual Transparency
The inability of an eavesdropper to detect hidden data is
referred by Perceptual transparency.
49
3.3 BINARY REPRESENTATION OF AN RGB COLOR IMAGE
For a 24-bit RGB image, every RGB component requires 8 bits
of memory. The range of every RGB component value is in between 0
to 255 where 255 represent brightest shade of the color and 0
represents darkest shade of the color. All different colors could be
produced with the combination of these ranges. Subsequently, the test
image is represented by integer matrix. Every pixel is a mix of RGB
values.
3.4 ALGORITHMS USED IN PROPOSED METHOD
In the proposed method, Steganography is combined with
Cryptography. It changes the meaning of the information as well as it
hides the presence of information from the hacker. The LZ algorithm for
compression and RSA algorithm for encryption and decryption are
used in this chapter.
3.4.1 LSB
The easiest way to embed secret information within the cover
file is called LSB insertion. In this technique, the binary
representations of the secret data have been taken and the LSB of
each byte is overwritten within the image. If 24-bit color images are
used, then the quantity of modification will be small. As an example,
supposing that we have three neighbouring pixels (nine bytes) with the
following RGB encoding:
50
01101010 11110010 00110110
 01101001 11110000 00110101
 01100000 11101111 00110100
Now if we wish to embed the following 9 bits of compressed
secret information:
010010011.
If we insert these 9 bits over the LSB of the 9 bytes above, we
get the following sequence of bits (where bits in red color have been
modified):
01101010 11110011 00110110
 01101000 11110001 00110100
 01100000 11101111 00110101
Note that we have successfully hidden 9 bits but at a cost of
only modifying 5, or roughly 50% of the LSB bits.
3.4.2 LZ Compression Algorithm [85]:
Step-1: Read the original file.
Step-2: Count the total number of words, alphabets, special
characters and digits in the file.
Step-3: Find out the repeated words in the file.
Step-4: Prepare the word dictionary for the original file context.
Step-5: Create compressed file. In the compressed file place the
word’s number instead of actual words.
51
Step-6: Add dictionary to compressed file.
Step-7: Save the compressed file along with the dictionary.
3.4.3 RSA Algorithm
In Cryptography, RSA [86] is an algorithm for public-key
Cryptography. The RSA algorithm involves three steps: Key
generation, encryption and decryption.
Key Generation: The keys for the RSA algorithm are generated in the
following way:
Step-1: Choose two different random prime numbers p and q.
Step-2: Compute n = p*q.
n is used as the modulus for both the private and public
keys.
Step-3: Compute φ (n) = (p-1) (q-1). (φ is Euler’s totient function).
Step-4: Choose an integer e such that 1 < e < φ (pq), and gcd (e,
φ(n))=1
Step-5: Compute d =e-1 mod [φ (n)]
Step-6: Publish the public encryption key: (e; n)
Step-7: Keep secret private decryption key: (d; n)
53
Encryption:
The steps required to encrypt information at sender are as
follows:
Step-1: Obtain public key of recipient (e; n)
Step-2: Represent the information as an integer m in [0, n-1]
Step-3: Compute c = me mod n
Decryption:
The steps required to decrypt information at receiver side are
as follows:
Step-1: use private key (d; n)
Step-2: compute m = cd mod n
3.5 IMPLEMENTATION
LSB insertion is the easiest way to embed secret data in an
image. By replacing the LSB of each sampling bit with a binary
information, LSB insertion permits for a huge amount of secret
information to be embedded. During hiding and unhiding procedure,
the content of the secret information should not be modified.
3.5.1 LSB Encoding Algorithm
First the original image, as shown in the Fig. 3.1 and the
compressed encrypted secret message are taken. Then the encrypted
secret data has to be converted into binary format. Binary conversion
is done by taking the American Standard Code of Information
Interchange (ASCII) values of the character and converting them into 
54
binary format and generating stream of bits. Similarly, in cover image,
bytes representing the pixels are taken in single array and byte stream
is generated. Message bits are taken sequentially and then are placed
in LSB bit of image byte. Same procedure is followed till all the
message bits are placed in image bytes. Image generated is called
‘Stego-Image’ as shown in the Fig. 3.2. It is ready for transmission
through the Internet.
Algorithm for hiding secret data in Cover image:
Step-1: Read the cover image and secret text information which is to
be embedded in to the cover image.
Step-2: Compress the secret information.
Step-3: Convert the compressed secret information into cipher text
by using secret key shared by receiver and sender.
Step-4: Convert compressed encrypted text message into binary
form.
Step-5: Find LSBs of each RGB pixels of the cover image.
Step-6: Embed the bits of the secret information into bits of LSB of
RGB pixels of the cover image.
Step-7: Continue the procedure until the secret information is fully
hidden into cover file.
3.5.2 LSB Decoding Algorithm
First, ‘Stego-Image’ is taken and single array of bytes are
generated as it was done at the time of encoding. The total number of
bits of encrypted secret information and the bytes representing the 
55
pixels of stego-image are taken. Counter is initially set to 1, which in
turn gives the index number of the pixel byte where secret message bit
is available in LSB. The process is continued till final count of secret
message bit is reached. After this, the bit stream of the message shall
be generated. Available bits are grouped to form bytes such that each
byte represents single ASCII character. Characters are stored in text
file which represents the encrypted embedded message. After that the
decryption and decompression are to be performed.
Algorithm for unhiding secret data from Stego image:
Step-1: Read the stego image.
Step-2: Find LSBs of each RGB pixel of the stego image.
Step-3: Find and retrieve the LSBs of each RGB pixel of the stego
image.
Step-4: Continue the process until the message is fully extracted
from stego image.
Step-5: Decompress the extracted secret data.
Step-6: Using shared key, decrypt secret information to get original
information.
Step-7: Reconstruct the secret information.
3.6 EXPERIMENTAL WORK AND RESULTS
Comparing cover image with stego image needs an image quality
measure. Commonly used measures are MSE, PSNR, Correlation and
Histogram [87].
56
3.6.1 MSE
In statistics, MSE is quantifying the difference between values
implied by an estimator and the true values of the quantity being
estimated. MSE measures the average of the squares of the "errors."
The MSE between cover file and stego file is calculated as per
Eq. (1.2).
3.6.2 PSNR
PSNR scales the MSE according to the image range. The PSNR
between cover image and stego image is given by Eq. (1.3). A higher
PSNR indicates that the quality of the stego image is similar to the
cover image.
3.6.3 Correlation
Correlation, a best known method, not only evaluates the degree
of closeness between two functions but also determines the extent to
which the cover image and the stego image are close to each other even
after embedding data.
The MSE, PSNR and Correlation values for various image file
formats are shown in the Table 3.1.
57
Table 3.1: Quality Metrics for various Image File Formats
Cover Image Name Stego Image Name MSE PSNR
(dB)
Correla
tion
Cover_Leena.bmp Stego_Leena.bmp 3.6791 46.19 0.9984
Cover_Barbara.bmp Stego_Barbara.bmp 4.0184 49.42 0.9986
Cover_Baboon.gif Stego_Baboon.gif 2.1883 44.72 0.9993
Cover_House.gif Stego_House.gif 3.8426 47.49 0.9985
Cover_Peppers.png Stego_Peppers.png 3.0425 44.35 0.9973
Cover_Aeroplane.png Stego_Aeroplane.png 2.6573 42.15 0.9981
The results show that MSE, PSNR and correlation are in
comparison with already existing results. The MSE obtained for
different file formats varies from 2.6 to 4.0 and PSNR varies from
42.15 to 49.42 dB and 99.98% of correlation is obtained with the
proposed technique.
3.6.4 Histogram
An image histogram is a bar chart that shows the distribution of
intensities in an image. Fig. 3.1 is original image where as Fig. 3.2 is
stego image. Fig. 3.3 and 3.4 show the color histograms of cover image
and stego 
The Input Validation Cheat Sheet is a great place to start when tackling how to best implement input validation. There are two basic ideas when dealing with input validation: whitelist and blacklist. Whitelist is when you only allow known values to enter the application. Just as important as restricting the input, the parameter is then checked on the server-side to ensure the value hasn’t been altered in an intercepting proxy. Some of the most popular web development frameworks already have this type of functionality built-in; .NET’s event validation for example: http://msdn.microsoft.com/enus/library/system.web.ui.page.enableeventvalidation.aspx. 